name: CD

on:
  push:
    branches: [ "main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (no files used, just for context)
        uses: actions/checkout@v4

      - name: Deploy to Azure VM (password auth)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.VM_HOST_IP }}
          port: ${{ vars.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASS }}

          script: |
            set -e

            # Variables de repo injectées par GitHub Actions
            REPO_SLUG="${{ github.repository }}"          # ex: user/log430-a25-labo2
            REPO_NAME="${{ github.event.repository.name }}" # ex: log430-a25-labo2
            REPO_URL="https://github.com/${REPO_SLUG}.git"

            # Pré-requis (une seule fois, idempotent)
            if ! command -v docker >/dev/null 2>&1; then
              echo "[VM] Installing Docker..."
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker "$USER"
            fi
            if ! command -v git >/dev/null 2>&1; then
              echo "[VM] Installing git..."
              sudo apt-get update -y && sudo apt-get install -y git
            fi

            # Aller dans le HOME de l'utilisateur
            cd "$HOME"

            # Cloner si nécessaire, sinon pull hard sur la branche par défaut (main/master)
            if [ -d "${REPO_NAME}/.git" ]; then
              echo "[VM] Repo exists, pulling latest..."
              cd "${REPO_NAME}"
              git fetch --all
              # Choisir une branche qui existe (main > master)
              if git show-ref --verify --quiet refs/remotes/origin/main; then
                git reset --hard origin/main
              else
                git reset --hard origin/master
              fi
            else
              echo "[VM] Cloning repository into ~/${REPO_NAME}"
              git clone "${REPO_URL}" "${REPO_NAME}"
              cd "${REPO_NAME}"
            fi

            echo "[VM] Building & (re)starting with docker compose..."
            docker compose pull || true
            docker compose up -d --build

            echo "[VM] Current status:"
            docker compose ps
